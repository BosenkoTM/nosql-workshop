# –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π MongoDB - Jupyter Notebook
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
!pip install pymongo pandas numpy matplotlib seaborn plotly

import pymongo
from pymongo import MongoClient
from datetime import datetime, timedelta
from bson import ObjectId
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

print("üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

# =============================================================================
# üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB
# =============================================================================

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
try:
    client = MongoClient("mongodb://root:abc123!@mongo-1:27017/")
    db = client.recommendation_db
    collection = db.user_interactions
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    client.server_info()
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    collection.create_index([("user_id", 1)])
    collection.create_index([("item_id", 1)])
    collection.create_index([("timestamp", -1)])
    collection.create_index([("interaction_type", 1)])
    collection.create_index([("item_details.category", 1)])
    print("üìä –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

# =============================================================================
# üé≤ –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
# =============================================================================

def generate_sample_data(num_users=50, num_items=200, num_interactions=1000):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print(f"üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {num_interactions} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π...")
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    categories = ["electronics", "clothing", "books", "home", "sports", "beauty"]
    brands = ["Apple", "Samsung", "Nike", "Zara", "Amazon", "Ikea"]
    interaction_types = ["view", "like", "purchase", "share"]
    devices = ["mobile", "desktop", "tablet"]
    locations = ["home", "office", "store"]
    time_periods = ["morning", "afternoon", "evening", "night"]
    age_groups = ["18-25", "26-35", "36-45", "46-55", "55+"]
    genders = ["male", "female", "other"]
    interests = ["tech", "fashion", "sports", "cooking", "travel", "music"]
    
    import random
    interactions = []
    
    for i in range(num_interactions):
        user_id = f"user_{random.randint(1, num_users)}"
        item_id = f"item_{random.randint(1, num_items)}"
        
        interaction = {
            "user_id": user_id,
            "item_id": item_id,
            "interaction_type": random.choice(interaction_types),
            "timestamp": datetime.now() - timedelta(
                days=random.randint(0, 30),
                hours=random.randint(0, 23)
            ),
            "rating": round(random.uniform(1, 5), 1) if random.random() > 0.3 else None,
            "duration": random.randint(30, 1800),
            "context": {
                "device": random.choice(devices),
                "location": random.choice(locations),
                "time_of_day": random.choice(time_periods),
                "session_id": f"session_{random.randint(1000, 9999)}"
            },
            "item_details": {
                "category": random.choice(categories),
                "brand": random.choice(brands),
                "price": round(random.uniform(10, 500), 2),
                "tags": random.sample(["popular", "new", "sale", "premium"], 
                                    random.randint(1, 2))
            },
            "user_profile": {
                "age_group": random.choice(age_groups),
                "gender": random.choice(genders),
                "interests": random.sample(interests, random.randint(2, 3))
            }
        }
        interactions.append(interaction)
    
    # –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    collection.delete_many({})
    collection.insert_many(interactions)
    
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã: {len(interactions)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = collection.aggregate([
        {"$group": {
            "_id": None,
            "total_users": {"$addToSet": "$user_id"},
            "total_items": {"$addToSet": "$item_id"},
            "interactions_by_type": {
                "$push": "$interaction_type"
            }
        }}
    ])
    
    stat = list(stats)[0]
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stat['total_users'])}")
    print(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(stat['total_items'])}")
    
    return True

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
generate_sample_data()

# =============================================================================
# üìä –ê–ù–ê–õ–ò–ó –ë–ê–ó–û–í–´–• –ú–ï–¢–†–ò–ö
# =============================================================================

def show_basic_analytics():
    """–ü–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üìà –ë–ê–ó–û–í–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê\n" + "="*50)
    
    # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    pipeline_interactions = [
        {"$group": {
            "_id": "$interaction_type",
            "count": {"$sum": 1}
        }},
        {"$sort": {"count": -1}}
    ]
    
    interaction_data = list(collection.aggregate(pipeline_interactions))
    interaction_df = pd.DataFrame(interaction_data)
    interaction_df.columns = ['–¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
    
    print("üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:")
    print(interaction_df.to_string(index=False))
    
    # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
    
    # Pie chart
    ax1.pie(interaction_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], labels=interaction_df['–¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è'], 
            autopct='%1.1f%%', startangle=90)
    ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π')
    
    # Bar chart
    ax2.bar(interaction_df['–¢–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è'], interaction_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 
            color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'])
    ax2.set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ç–∏–ø–∞–º')
    ax2.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.show()
    
    # 2. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    pipeline_users = [
        {"$group": {
            "_id": "$user_id",
            "total_interactions": {"$sum": 1},
            "purchases": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "purchase"]}, 1, 0]}
            },
            "avg_rating": {"$avg": "$rating"}
        }},
        {"$sort": {"total_interactions": -1}},
        {"$limit": 10}
    ]
    
    top_users = list(collection.aggregate(pipeline_users))
    users_df = pd.DataFrame(top_users)
    users_df.columns = ['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π', '–ü–æ–∫—É–ø–∫–∏', '–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞']
    
    print(f"\nüëë –¢–û–ü-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    print(users_df.to_string(index=False))

show_basic_analytics()

# =============================================================================
# üîç –§–£–ù–ö–¶–ò–ò –†–ï–ö–û–ú–ï–ù–î–ê–¢–ï–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´
# =============================================================================

class SimpleRecommender:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Jupyter"""
    
    def __init__(self):
        self.collection = collection
    
    def get_similar_items(self, item_id, limit=5):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        
        pipeline = [
            {"$match": {"item_id": item_id}},
            {"$lookup": {
                "from": "user_interactions",
                "let": {"current_user": "$user_id"},
                "pipeline": [
                    {"$match": {
                        "$expr": {"$eq": ["$user_id", "$$current_user"]},
                        "item_id": {"$ne": item_id}
                    }}
                ],
                "as": "user_other_items"
            }},
            {"$unwind": "$user_other_items"},
            {"$group": {
                "_id": "$user_other_items.item_id",
                "category": {"$first": "$user_other_items.item_details.category"},
                "brand": {"$first": "$user_other_items.item_details.brand"},
                "price": {"$first": "$user_other_items.item_details.price"},
                "similarity_score": {"$sum": 1},
                "avg_rating": {"$avg": "$user_other_items.rating"}
            }},
            {"$sort": {"similarity_score": -1}},
            {"$limit": limit}
        ]
        
        results = list(self.collection.aggregate(pipeline))
        return pd.DataFrame(results) if results else pd.DataFrame()
    
    def get_popular_items(self, category=None, limit=10):
        """–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
        
        match_stage = {"timestamp": {"$gte": datetime.now() - timedelta(days=7)}}
        if category:
            match_stage["item_details.category"] = category
        
        pipeline = [
            {"$match": match_stage},
            {"$group": {
                "_id": "$item_id",
                "category": {"$first": "$item_details.category"},
                "brand": {"$first": "$item_details.brand"},
                "price": {"$first": "$item_details.price"},
                "total_interactions": {"$sum": 1},
                "unique_users": {"$addToSet": "$user_id"},
                "purchases": {
                    "$sum": {"$cond": [{"$eq": ["$interaction_type", "purchase"]}, 1, 0]}
                },
                "avg_rating": {"$avg": "$rating"}
            }},
            {"$addFields": {
                "unique_users_count": {"$size": "$unique_users"},
                "popularity_score": {
                    "$add": [
                        "$total_interactions",
                        {"$multiply": ["$purchases", 3]},
                        {"$multiply": [{"$ifNull": ["$avg_rating", 0]}, 2]}
                    ]
                }
            }},
            {"$sort": {"popularity_score": -1}},
            {"$limit": limit}
        ]
        
        results = list(self.collection.aggregate(pipeline))
        return pd.DataFrame(results) if results else pd.DataFrame()
    
    def get_user_recommendations(self, user_id, limit=5):
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        pipeline = [
            {"$match": {"user_id": user_id}},
            {"$lookup": {
                "from": "user_interactions",
                "let": {"current_item": "$item_id"},
                "pipeline": [
                    {"$match": {
                        "$expr": {"$eq": ["$item_id", "$$current_item"]},
                        "user_id": {"$ne": user_id}
                    }}
                ],
                "as": "similar_users"
            }},
            {"$unwind": "$similar_users"},
            {"$lookup": {
                "from": "user_interactions",
                "let": {"similar_user": "$similar_users.user_id"},
                "pipeline": [
                    {"$match": {
                        "$expr": {"$eq": ["$user_id", "$$similar_user"]}
                    }},
                    {"$lookup": {
                        "from": "user_interactions",
                        "let": {"check_item": "$item_id"},
                        "pipeline": [
                            {"$match": {
                                "$expr": {
                                    "$and": [
                                        {"$eq": ["$item_id", "$$check_item"]},
                                        {"$eq": ["$user_id", user_id]}
                                    ]
                                }
                            }}
                        ],
                        "as": "user_has_item"
                    }},
                    {"$match": {"user_has_item": {"$size": 0}}}
                ],
                "as": "recommendations"
            }},
            {"$unwind": "$recommendations"},
            {"$group": {
                "_id": "$recommendations.item_id",
                "category": {"$first": "$recommendations.item_details.category"},
                "brand": {"$first": "$recommendations.item_details.brand"},
                "price": {"$first": "$recommendations.item_details.price"},
                "recommendation_score": {"$sum": 1}
            }},
            {"$sort": {"recommendation_score": -1}},
            {"$limit": limit}
        ]
        
        results = list(self.collection.aggregate(pipeline))
        return pd.DataFrame(results) if results else pd.DataFrame()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—è
recommender = SimpleRecommender()

# =============================================================================
# üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
# =============================================================================

def demo_recommendations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô\n" + "="*60)
    
    # 1. –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
    print("1Ô∏è‚É£ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è item_1:")
    similar = recommender.get_similar_items("item_1", limit=3)
    if not similar.empty:
        print(similar[['_id', 'category', 'brand', 'similarity_score']].to_string(index=False))
    else:
        print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    # 2. –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    print(f"\n2Ô∏è‚É£ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
    popular = recommender.get_popular_items(limit=5)
    if not popular.empty:
        print(popular[['_id', 'category', 'brand', 'popularity_score']].to_string(index=False))
    
    # 3. –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n3Ô∏è‚É£ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è user_1:")
    personal = recommender.get_user_recommendations("user_1", limit=3)
    if not personal.empty:
        print(personal[['_id', 'category', 'brand', 'recommendation_score']].to_string(index=False))
    else:
        print("   –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

demo_recommendations()

# =============================================================================
# üìä –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ò
# =============================================================================

def create_analytics_dashboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    print("üìä –°–û–ó–î–ê–ù–ò–ï –î–ê–®–ë–û–†–î–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò\n" + "="*50)
    
    # 1. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    pipeline_time = [
        {"$group": {
            "_id": "$context.time_of_day",
            "interactions": {"$sum": 1},
            "unique_users": {"$addToSet": "$user_id"}
        }},
        {"$addFields": {
            "unique_users_count": {"$size": "$unique_users"}
        }}
    ]
    
    time_data = list(collection.aggregate(pipeline_time))
    time_df = pd.DataFrame(time_data)
    
    if not time_df.empty:
        # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        fig = px.bar(time_df, x='_id', y='interactions', 
                    title='–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è',
                    labels={'_id': '–í—Ä–µ–º—è –¥–Ω—è', 'interactions': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π'})
        fig.show()
    
    # 2. –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    pipeline_categories = [
        {"$group": {
            "_id": "$item_details.category",
            "total_interactions": {"$sum": 1},
            "avg_price": {"$avg": "$item_details.price"},
            "purchases": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "purchase"]}, 1, 0]}
            }
        }},
        {"$sort": {"total_interactions": -1}}
    ]
    
    cat_data = list(collection.aggregate(pipeline_categories))
    cat_df = pd.DataFrame(cat_data)
    
    if not cat_df.empty:
        # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        fig = px.scatter(cat_df, x='total_interactions', y='purchases',
                        size='avg_price', hover_name='_id',
                        title='–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤',
                        labels={
                            'total_interactions': '–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π',
                            'purchases': '–ü–æ–∫—É–ø–∫–∏'
                        })
        fig.show()
    
    # 3. –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    pipeline_devices = [
        {"$group": {
            "_id": "$context.device",
            "views": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "view"]}, 1, 0]}
            },
            "purchases": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "purchase"]}, 1, 0]}
            }
        }},
        {"$addFields": {
            "conversion_rate": {
                "$cond": [
                    {"$gt": ["$views", 0]},
                    {"$divide": ["$purchases", "$views"]},
                    0
                ]
            }
        }}
    ]
    
    device_data = list(collection.aggregate(pipeline_devices))
    device_df = pd.DataFrame(device_data)
    
    if not device_df.empty:
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        fig, ax = plt.subplots(figsize=(10, 6))
        x = range(len(device_df))
        
        ax.bar([i-0.2 for i in x], device_df['views'], width=0.4, 
               label='–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', alpha=0.7)
        ax.bar([i+0.2 for i in x], device_df['purchases'], width=0.4, 
               label='–ü–æ–∫—É–ø–∫–∏', alpha=0.7)
        
        ax.set_xlabel('–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        ax.set_title('–ü—Ä–æ—Å–º–æ—Ç—Ä—ã vs –ü–æ–∫—É–ø–∫–∏ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º')
        ax.set_xticks(x)
        ax.set_xticklabels(device_df['_id'])
        ax.legend()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        ax2 = ax.twinx()
        ax2.plot(x, device_df['conversion_rate'], 'ro-', label='–ö–æ–Ω–≤–µ—Ä—Å–∏—è')
        ax2.set_ylabel('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏')
        ax2.legend(loc='upper right')
        
        plt.tight_layout()
        plt.show()

create_analytics_dashboard()

# =============================================================================
# üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def interactive_recommendations():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n" + "="*50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = collection.distinct("user_id")[:10]  # –ü–µ—Ä–≤—ã–µ 10
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users[:5]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    items = collection.distinct("item_id")[:10]  # –ü–µ—Ä–≤—ã–µ 10
    print(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {items[:5]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = collection.distinct("item_details.category")
    print(f"üè∑Ô∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
    
    return {
        'users': users,
        'items': items,
        'categories': categories
    }

available_data = interactive_recommendations()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def quick_recommend(user_id=None, item_id=None, category=None):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    print(f"\nüöÄ –ë–´–°–¢–†–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("="*30)
    
    if user_id:
        print(f"üë§ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        recs = recommender.get_user_recommendations(user_id, limit=3)
        if not recs.empty:
            print(recs[['_id', 'category', 'brand']].to_string(index=False))
        else:
            print("   –ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    
    if item_id:
        print(f"\nüì¶ –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ {item_id}:")
        similar = recommender.get_similar_items(item_id, limit=3)
        if not similar.empty:
            print(similar[['_id', 'category', 'brand']].to_string(index=False))
        else:
            print("   –ù–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    
    if category:
        print(f"\nüè∑Ô∏è  –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:")
        popular = recommender.get_popular_items(category, limit=3)
        if not popular.empty:
            print(popular[['_id', 'brand', 'popularity_score']].to_string(index=False))
        else:
            print("   –ù–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
print("\n" + "="*60)
print("üí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
print("="*60)
print("quick_recommend(user_id='user_1')  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
print("quick_recommend(item_id='item_5')  # –ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã") 
print("quick_recommend(category='electronics')  # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
print("quick_recommend(user_id='user_2', category='clothing')  # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
quick_recommend(user_id='user_1', item_id='item_5', category='electronics')