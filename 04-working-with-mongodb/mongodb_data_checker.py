import pymongo
from pymongo import MongoClient
from datetime import datetime
import pandas as pd
import json
from pprint import pprint

# =============================================================================
# üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB
# =============================================================================

def connect_to_mongodb():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å –∏–∑ docker-compose)
        client = MongoClient("mongodb://root:abc123!@mongo-1:27017/")
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        # client = MongoClient("mongodb://root:abc123!@localhost:27017/")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        client.server_info()
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB!")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        db = client.recommendation_db
        collection = db.user_interactions
        
        return client, db, collection
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
        print("\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä MongoDB –∑–∞–ø—É—â–µ–Ω: docker ps")
        print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ localhost –≤–º–µ—Å—Ç–æ mongo-1 –≤ —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç 27017 –¥–æ—Å—Ç—É–ø–µ–Ω")
        return None, None, None

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
client, db, collection = connect_to_mongodb()

if collection is None:
    print("üõë –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
else:
    print(f"üóÑÔ∏è  –†–∞–±–æ—Ç–∞–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {db.name}")
    print(f"üìã –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π: {collection.name}")

# =============================================================================
# üìä –û–°–ù–û–í–ù–´–ï –ü–†–û–í–ï–†–ö–ò –î–ê–ù–ù–´–•
# =============================================================================

def check_collection_stats():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üìä –û–°–ù–û–í–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–õ–õ–ï–ö–¶–ò–ò")
    print("="*60)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    total_docs = collection.count_documents({})
    print(f"üìÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
    
    if total_docs == 0:
        print("‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    unique_users = len(collection.distinct("user_id"))
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    unique_items = len(collection.distinct("item_id"))
    print(f"üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {unique_items}")
    
    # –¢–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    interaction_types = collection.distinct("interaction_type")
    print(f"üéØ –¢–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {interaction_types}")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    categories = collection.distinct("item_details.category")
    print(f"üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {categories}")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
    pipeline_time = [
        {"$group": {
            "_id": None,
            "min_date": {"$min": "$timestamp"},
            "max_date": {"$max": "$timestamp"}
        }}
    ]
    
    time_range = list(collection.aggregate(pipeline_time))
    if time_range:
        min_date = time_range[0]['min_date']
        max_date = time_range[0]['max_date']
        print(f"üìÖ –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_date.strftime('%Y-%m-%d')} - {max_date.strftime('%Y-%m-%d')}")

check_collection_stats()

# =============================================================================
# üîç –ü–†–û–°–ú–û–¢–† –ü–†–ò–ú–ï–†–û–í –î–ê–ù–ù–´–•
# =============================================================================

def show_sample_documents(limit=3):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üîç –ü–†–ò–ú–ï–†–´ –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    sample_docs = list(collection.aggregate([{"$sample": {"size": limit}}]))
    
    for i, doc in enumerate(sample_docs, 1):
        print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç #{i}:")
        print("-" * 40)
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ JSON
        doc_copy = doc.copy()
        doc_copy['_id'] = str(doc_copy['_id'])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ObjectId –≤ —Å—Ç—Ä–æ–∫—É
        doc_copy['timestamp'] = doc_copy['timestamp'].strftime('%Y-%m-%d %H:%M:%S')
        
        print(json.dumps(doc_copy, indent=2, ensure_ascii=False))

show_sample_documents(limit=2)

# =============================================================================
# üìã –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ü–†–û–°–ú–û–¢–† –î–ê–ù–ù–´–•
# =============================================================================

def show_data_as_table(limit=10):
    """–ü–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üìã –î–ê–ù–ù–´–ï –í –¢–ê–ë–õ–ò–ß–ù–û–ú –§–û–†–ú–ê–¢–ï")
    print("="*60)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
    cursor = collection.find().limit(limit)
    
    data = []
    for doc in cursor:
        flat_doc = {
            'user_id': doc['user_id'],
            'item_id': doc['item_id'],
            'interaction_type': doc['interaction_type'],
            'timestamp': doc['timestamp'].strftime('%Y-%m-%d %H:%M'),
            'rating': doc.get('rating', 'N/A'),
            'duration': doc['duration'],
            'device': doc['context']['device'],
            'location': doc['context']['location'],
            'time_of_day': doc['context']['time_of_day'],
            'category': doc['item_details']['category'],
            'brand': doc['item_details']['brand'],
            'price': doc['item_details']['price'],
            'age_group': doc['user_profile']['age_group'],
            'gender': doc['user_profile']['gender']
        }
        data.append(flat_doc)
    
    if data:
        df = pd.DataFrame(data)
        print(df.to_string(index=False))
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")

show_data_as_table(limit=5)

# =============================================================================
# üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú
# =============================================================================

def analyze_by_categories():
    """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üìä –ê–ù–ê–õ–ò–ó –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
    print("="*60)
    
    pipeline = [
        {"$group": {
            "_id": "$item_details.category",
            "total_interactions": {"$sum": 1},
            "unique_users": {"$addToSet": "$user_id"},
            "unique_items": {"$addToSet": "$item_id"},
            "avg_price": {"$avg": "$item_details.price"},
            "purchases": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "purchase"]}, 1, 0]}
            },
            "likes": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "like"]}, 1, 0]}
            },
            "views": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "view"]}, 1, 0]}
            },
            "avg_rating": {"$avg": "$rating"}
        }},
        {"$addFields": {
            "unique_users_count": {"$size": "$unique_users"},
            "unique_items_count": {"$size": "$unique_items"}
        }},
        {"$sort": {"total_interactions": -1}}
    ]
    
    results = list(collection.aggregate(pipeline))
    
    if results:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df_data = []
        for result in results:
            df_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': result['_id'],
                '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è': result['total_interactions'],
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': result['unique_users_count'],
                '–¢–æ–≤–∞—Ä—ã': result['unique_items_count'],
                '–ü–æ–∫—É–ø–∫–∏': result['purchases'],
                '–õ–∞–π–∫–∏': result['likes'],
                '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã': result['views'],
                '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞': f"${result['avg_price']:.2f}" if result['avg_price'] else 'N/A',
                '–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞': f"{result['avg_rating']:.1f}" if result['avg_rating'] else 'N/A'
            })
        
        df = pd.DataFrame(df_data)
        print(df.to_string(index=False))
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

analyze_by_categories()

# =============================================================================
# üë• –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# =============================================================================

def analyze_user_activity():
    """–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üë• –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("="*60)
    
    pipeline = [
        {"$group": {
            "_id": "$user_id",
            "total_interactions": {"$sum": 1},
            "purchases": {
                "$sum": {"$cond": [{"$eq": ["$interaction_type", "purchase"]}, 1, 0]}
            },
            "total_spent": {
                "$sum": {
                    "$cond": [
                        {"$eq": ["$interaction_type", "purchase"]},
                        "$item_details.price",
                        0
                    ]
                }
            },
            "avg_rating": {"$avg": "$rating"},
            "categories": {"$addToSet": "$item_details.category"},
            "devices": {"$addToSet": "$context.device"},
            "first_interaction": {"$min": "$timestamp"},
            "last_interaction": {"$max": "$timestamp"}
        }},
        {"$addFields": {
            "categories_count": {"$size": "$categories"},
            "devices_count": {"$size": "$devices"},
            "days_active": {
                "$divide": [
                    {"$subtract": ["$last_interaction", "$first_interaction"]},
                    86400000  # –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –¥–µ–Ω—å
                ]
            }
        }},
        {"$sort": {"total_interactions": -1}},
        {"$limit": 10}
    ]
    
    results = list(collection.aggregate(pipeline))
    
    if results:
        print("üèÜ –¢–û–ü-10 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
        print("-" * 60)
        
        for i, user in enumerate(results, 1):
            print(f"{i:2d}. {user['_id']}")
            print(f"    üí´ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {user['total_interactions']}")
            print(f"    üõí –ü–æ–∫—É–ø–æ–∫: {user['purchases']}")
            print(f"    üí∞ –ü–æ—Ç—Ä–∞—Ç–∏–ª: ${user['total_spent']:.2f}")
            print(f"    ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {user['avg_rating']:.1f}" if user['avg_rating'] else "    ‚≠ê –û—Ü–µ–Ω–æ–∫ –Ω–µ—Ç")
            print(f"    üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {user['categories_count']}")
            print(f"    üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {user['devices_count']}")
            print(f"    üìÖ –î–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user['days_active']:.1f}")
            print()
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")

analyze_user_activity()

# =============================================================================
# üéØ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–ü–ò–°–ï–ô
# =============================================================================

def check_specific_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏ —Å–≤—è–∑–µ–π"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üéØ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ó–ê–ü–ò–°–ï–ô")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = "user_1"
    user_data = list(collection.find({"user_id": user_id}).limit(5))
    
    if user_data:
        print(f"üë§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(user_data)}")
        
        for i, record in enumerate(user_data[:3], 1):
            print(f"   {i}. {record['interaction_type']} -> {record['item_id']} "
                  f"({record['item_details']['category']}) "
                  f"–Ω–∞ {record['context']['device']}")
    else:
        print(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    item_id = "item_1"
    item_data = list(collection.find({"item_id": item_id}).limit(5))
    
    if item_data:
        print(f"\nüì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item_id}:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(item_data)}")
        
        for i, record in enumerate(item_data[:3], 1):
            print(f"   {i}. {record['user_id']} —Å–¥–µ–ª–∞–ª {record['interaction_type']} "
                  f"–Ω–∞ {record['context']['device']}")
    else:
        print(f"‚ö†Ô∏è  –î–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

check_specific_data()

# =============================================================================
# üîß –°–õ–£–ñ–ï–ë–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

def check_data_quality():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    if collection is None:
        return
    
    print("\n" + "="*60)
    print("üîß –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
    print("="*60)
    
    total_docs = collection.count_documents({})
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    checks = [
        ("user_id", {"user_id": {"$exists": False}}),
        ("item_id", {"item_id": {"$exists": False}}),
        ("interaction_type", {"interaction_type": {"$exists": False}}),
        ("timestamp", {"timestamp": {"$exists": False}}),
        ("category", {"item_details.category": {"$exists": False}}),
        ("price", {"item_details.price": {"$exists": False}})
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:")
    all_good = True
    
    for field_name, query in checks:
        missing_count = collection.count_documents(query)
        if missing_count > 0:
            print(f"   ‚ùå {field_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ {missing_count} –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
            all_good = False
        else:
            print(f"   ‚úÖ {field_name}: –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–æ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö")
    
    if all_good:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!")
    else:
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\nüìä –î–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π:")
    
    # –¶–µ–Ω—ã
    price_stats = list(collection.aggregate([
        {"$group": {
            "_id": None,
            "min_price": {"$min": "$item_details.price"},
            "max_price": {"$max": "$item_details.price"},
            "avg_price": {"$avg": "$item_details.price"}
        }}
    ]))
    
    if price_stats:
        stats = price_stats[0]
        print(f"   üí∞ –¶–µ–Ω—ã: ${stats['min_price']:.2f} - ${stats['max_price']:.2f} "
              f"(—Å—Ä–µ–¥–Ω–µ–µ: ${stats['avg_price']:.2f})")
    
    # –†–µ–π—Ç–∏–Ω–≥–∏
    rating_stats = list(collection.aggregate([
        {"$match": {"rating": {"$ne": None}}},
        {"$group": {
            "_id": None,
            "min_rating": {"$min": "$rating"},
            "max_rating": {"$max": "$rating"},
            "avg_rating": {"$avg": "$rating"},
            "count": {"$sum": 1}
        }}
    ]))
    
    if rating_stats:
        stats = rating_stats[0]
        print(f"   ‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏: {stats['min_rating']} - {stats['max_rating']} "
              f"(—Å—Ä–µ–¥–Ω–µ–µ: {stats['avg_rating']:.1f}, –∑–∞–ø–∏—Å–µ–π: {stats['count']})")

check_data_quality()

# =============================================================================
# üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# =============================================================================

def quick_search(user_id=None, item_id=None, interaction_type=None, limit=5):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    
    if collection is None:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
    query = {}
    if user_id:
        query["user_id"] = user_id
    if item_id:
        query["item_id"] = item_id
    if interaction_type:
        query["interaction_type"] = interaction_type
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = list(collection.find(query).limit(limit))
    
    print(f"\nüîé –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")
    print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
    print("-" * 50)
    
    for i, doc in enumerate(results, 1):
        print(f"{i}. {doc['user_id']} -> {doc['interaction_type']} -> {doc['item_id']} "
              f"({doc['item_details']['category']}) –Ω–∞ {doc['context']['device']} "
              f"–≤ {doc['timestamp'].strftime('%Y-%m-%d %H:%M')}")

def get_available_values():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    
    if collection is None:
        return
    
    print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –î–õ–Ø –ü–û–ò–°–ö–ê:")
    print("="*50)
    
    users = collection.distinct("user_id")[:10]
    items = collection.distinct("item_id")[:10]
    interactions = collection.distinct("interaction_type")
    
    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–µ—Ä–≤—ã–µ 10): {users}")
    print(f"üì¶ –¢–æ–≤–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ 10): {items}")
    print(f"üéØ –¢–∏–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {interactions}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
get_available_values()

# =============================================================================
# üí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# =============================================================================

print("\n" + "="*60)
print("üí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –§–£–ù–ö–¶–ò–ô:")
print("="*60)
print("# –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
print("quick_search(user_id='user_1')")
print()
print("# –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º:")
print("quick_search(item_id='item_5')")
print()
print("# –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–∫—É–ø–æ–∫:")
print("quick_search(interaction_type='purchase')")
print()
print("# –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫:")
print("quick_search(user_id='user_2', interaction_type='like')")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π
print("\nüöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø:")
quick_search(user_id='user_1', limit=3)
quick_search(interaction_type='purchase', limit=3)